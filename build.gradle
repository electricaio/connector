import jp.classmethod.aws.gradle.s3.AmazonS3FileUploadTask

plugins {
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'org.hidetake.swagger.generator' version '2.15.0' apply false
    id 'jp.classmethod.aws' version '0.38' apply false
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'idea'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'findbugs'
    apply plugin: 'maven-publish'

    repositories {
        jcenter()
        mavenCentral()
    }

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    group = 'io.electrica.connector'
    version = '0.0.1'
}

subprojects {
    ext {
        spi = '0.0.1'
        itTest = '0.0.1'

        slack = '0.0.1'
        echo = '0.0.1'

        lombok = '1.18.4'
        mockito = '2.23.0'
        jupiter = '5.3.2'
    }

    def moduleName = it.name
    def moduleVersion = it.version
    def moduleDescription = it.description == null ? moduleName : it.description
    if (moduleName != 'dependencies') {

        // Setup Lombok, test libraries and JUnit5 implementation for all modules
        dependencies {
            compileOnly "org.projectlombok:lombok:$lombok"
            annotationProcessor "org.projectlombok:lombok:$lombok"

            testCompile "org.mockito:mockito-core:$mockito"

            testImplementation "org.junit.jupiter:junit-jupiter-api:$jupiter"
            testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$jupiter"
        }

        test {
            useJUnitPlatform()
        }

        // Setup Swagger code generator, Swagger files upload and required dependencies for connector modules
        if (moduleName != 'spi' && moduleName != 'it-test') {
            apply plugin: 'org.hidetake.swagger.generator'
            apply plugin: 'jp.classmethod.aws.s3'

            dependencies {
                compile project(':spi')
                compile 'io.swagger:swagger-annotations:1.5.17'

                testCompile project(':it-test')

                swaggerCodegen 'io.swagger:swagger-codegen-cli:2.3.1'
            }

            // Upload Swagger files to S3 after `publish` task
            publish {
                doLast {
                    tasks.uploadContent.execute()
                }
            }
            fileTree("./swagger").visit { FileVisitDetails details ->
                def fileName = details.name
                if (fileName.endsWith('.yml')) {
                    File swaggerFile = file("$moduleName/swagger/$fileName")
                    task uploadContent(type: AmazonS3FileUploadTask) {
                        file swaggerFile
                        bucketName System.env.AWS_S3_CONNECTOR_ARTIFACT_BUCKET_NAME
                        key "$moduleName/$moduleVersion/$fileName"
                    }
                }
            }
        }

        sourceSets {
            main {
                java { srcDir 'src/main/java' }
                resources { srcDir 'src/main/resources' }
            }
        }

        task sourceJar(type: Jar) {
            classifier 'sources'
            from sourceSets.main.allJava
        }

        publishing {
            repositories {
                maven {
                    url System.env.AWS_S3_MAVEN_REPO_URL
                    credentials(AwsCredentials) {
                        accessKey System.env.AWS_ACCESS_KEY_ID
                        secretKey System.env.AWS_SECRET_ACCESS_KEY
                    }
                }
            }
            publications {
                maven(MavenPublication) {
                    from components.java
                    afterEvaluate {
                        artifactId = jar.baseName
                    }
                    pom {
                        name = moduleName + ' Connectors'
                        description = moduleDescription
//                    url = 'http://www.example.com/library'
                        licenses {
                            license {
                                name = 'GNU General Public License, Version 3'
                                url = 'https://www.gnu.org/licenses/gpl-3.0.en.html'
                            }
                        }
                        scm {
                            url = 'https://github.com/electricaio/connector'
                            connection = 'scm:git:https://github.com/electricaio/connector.git'
                        }
                    }
                    artifact tasks.sourceJar
                }
            }
        }

        jacocoTestReport {
            reports {
                xml.enabled = true // coveralls plugin depends on xml format report
                html.enabled = true
            }
        }

        // Checkstyle settings
        checkstyle {
            toolVersion '7.8.1'
            configFile file("${rootDir}/config/checkstyle/checkstyle.xml")
        }
        checkstyleMain {
            source = 'src/main/java'
        }
        checkstyleTest {
            source = 'src/test/java'
        }

        tasks.withType(Checkstyle) {
            reports {
                xml.enabled false
                html.enabled true
            }
        }

        // Findbugs  settings
        findbugs {
            ignoreFailures = false
            toolVersion = '3.0.1'
            sourceSets = [sourceSets.main]
            excludeFilter = file("${rootDir}/config/findbugs/excludeFilter.xml")
            reportsDir = file("${buildDir}/reports/findbugs")
            effort = 'max'
        }

        tasks.withType(FindBugs) {
            reports {
                xml.enabled false
                html.enabled true
            }
        }

    } // not `dependencies` module
} // subprojects

def projects = subprojects

task jacocoMerge(type: JacocoMerge) {
    projects.each { subproject ->
        executionData subproject.tasks.withType(Test)
    }
    doFirst {
        executionData = files(executionData.findAll { it.exists() })
    }
}

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
    description = 'Generates an aggregate report from all subprojects'
    dependsOn projects.test, jacocoMerge

    additionalSourceDirs = files(projects.sourceSets.main.allSource.srcDirs)
    sourceDirectories = files(projects.sourceSets.main.allSource.srcDirs)
    classDirectories = files(projects.sourceSets.main.output)
    executionData jacocoMerge.destinationFile

    reports {
        html.enabled = true // human readable
        xml.enabled = true // required by coveralls
    }
}

coveralls {
    sourceDirs = projects.sourceSets.main.allSource.srcDirs.flatten()
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
    group = 'Coverage reports'
    description = 'Uploads the aggregated coverage report to Coveralls'

    dependsOn jacocoRootReport
}
